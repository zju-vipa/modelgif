import numpy as np

affi = np.array([
    [
        2.98261638e-09, 9.97147799e-01, 7.80778766e-01, 9.71324861e-01,
        9.98061299e-01, 9.45376158e-01, 9.98021066e-01, 9.98193622e-01,
        9.98087823e-01, 9.98247027e-01, 9.98404205e-01, 9.98110175e-01,
        9.98782814e-01, 9.83329594e-01, 9.99179482e-01, 9.97902811e-01,
        9.97791469e-01
    ],
    [
        9.97147799e-01, 2.81929968e-09, 9.96300161e-01, 9.95846570e-01,
        9.59148884e-01, 9.97571588e-01, 9.61596847e-01, 9.56628144e-01,
        9.74429369e-01, 9.73406553e-01, 9.54361379e-01, 9.92731929e-01,
        9.57792044e-01, 9.95106578e-01, 9.97305810e-01, 9.88672316e-01,
        9.93405759e-01
    ],
    [
        7.80778766e-01, 9.96300161e-01, 2.80022627e-09, 9.59299147e-01,
        9.97775257e-01, 9.24247801e-01, 9.97451246e-01, 9.97339547e-01,
        9.97600913e-01, 9.97793376e-01, 9.98384714e-01, 9.98170614e-01,
        9.97962356e-01, 9.77986276e-01, 9.98935759e-01, 9.97619450e-01,
        9.96294141e-01
    ],
    [
        9.71324861e-01, 9.95846570e-01, 9.59299147e-01, 2.49624255e-09,
        9.95363116e-01, 9.69903111e-01, 9.96507049e-01, 9.96779561e-01,
        9.97183919e-01, 9.98085439e-01, 9.97550130e-01, 9.98105943e-01,
        9.96150494e-01, 9.84041929e-01, 9.98170495e-01, 9.97928023e-01,
        9.96240139e-01
    ],
    [
        9.98061299e-01, 9.59148884e-01, 9.97775257e-01, 9.95363116e-01,
        2.37226483e-09, 9.98924553e-01, 9.63288724e-01, 9.44905221e-01,
        9.58660185e-01, 9.60614681e-01, 9.58008766e-01, 9.95631278e-01,
        9.63873267e-01, 9.94775176e-01, 9.97503281e-01, 9.87207651e-01,
        9.93965328e-01
    ],
    [
        9.45376158e-01, 9.97571588e-01, 9.24247801e-01, 9.69903111e-01,
        9.98924553e-01, 2.75135048e-09, 9.99014318e-01, 9.99215007e-01,
        9.98621106e-01, 9.98727679e-01, 9.99224365e-01, 9.99364972e-01,
        9.99040961e-01, 9.84619200e-01, 9.99220371e-01, 9.98844624e-01,
        9.97385919e-01
    ],
    [
        9.98021066e-01, 9.61596847e-01, 9.97451246e-01, 9.96507049e-01,
        9.63288724e-01, 9.99014318e-01, 3.11374659e-09, 9.58835363e-01,
        9.72571969e-01, 9.71712947e-01, 9.62441564e-01, 9.95714247e-01,
        9.62021708e-01, 9.96177197e-01, 9.97820318e-01, 9.89028573e-01,
        9.95509982e-01
    ],
    [
        9.98193622e-01, 9.56628144e-01, 9.97339547e-01, 9.96779561e-01,
        9.44905221e-01, 9.99215007e-01, 9.58835363e-01, 2.50339505e-09,
        9.41108465e-01, 9.49478984e-01, 9.45655167e-01, 9.93939161e-01,
        9.57353890e-01, 9.95405138e-01, 9.97421384e-01, 9.87813056e-01,
        9.93018031e-01
    ],
    [
        9.98087823e-01, 9.74429369e-01, 9.97600913e-01, 9.97183919e-01,
        9.58660185e-01, 9.98621106e-01, 9.72571969e-01, 9.41108465e-01,
        3.76701337e-09, 9.36545551e-01, 9.71445918e-01, 9.94799912e-01,
        9.72160935e-01, 9.95402813e-01, 9.98268306e-01, 9.85862017e-01,
        9.89939630e-01
    ],
    [
        9.98247027e-01, 9.73406553e-01, 9.97793376e-01, 9.98085439e-01,
        9.60614681e-01, 9.98727679e-01, 9.71712947e-01, 9.49478984e-01,
        9.36545551e-01, 2.17914575e-09, 9.72479403e-01, 9.95188057e-01,
        9.71114814e-01, 9.95398581e-01, 9.98218417e-01, 9.86866891e-01,
        9.95451331e-01
    ],
    [
        9.98404205e-01, 9.54361379e-01, 9.98384714e-01, 9.97550130e-01,
        9.58008766e-01, 9.99224365e-01, 9.62441564e-01, 9.45655167e-01,
        9.71445918e-01, 9.72479403e-01, 3.17692761e-09, 9.94601488e-01,
        9.62168455e-01, 9.97024059e-01, 9.94748592e-01, 9.91186798e-01,
        9.92023647e-01
    ],
    [
        9.98110175e-01, 9.92731929e-01, 9.98170614e-01, 9.98105943e-01,
        9.95631278e-01, 9.99364972e-01, 9.95714247e-01, 9.93939161e-01,
        9.94799912e-01, 9.95188057e-01, 9.94601488e-01, 2.95519831e-09,
        9.93482053e-01, 9.97691274e-01, 9.95054245e-01, 9.95970786e-01,
        9.98503745e-01
    ],
    [
        9.98782814e-01, 9.57792044e-01, 9.97962356e-01, 9.96150494e-01,
        9.63873267e-01, 9.99040961e-01, 9.62021708e-01, 9.57353890e-01,
        9.72160935e-01, 9.71114814e-01, 9.62168455e-01, 9.93482053e-01,
        3.18765636e-09, 9.92287338e-01, 9.98073280e-01, 9.87795949e-01,
        9.93933260e-01
    ],
    [
        9.83329594e-01, 9.95106578e-01, 9.77986276e-01, 9.84041929e-01,
        9.94775176e-01, 9.84619200e-01, 9.96177197e-01, 9.95405138e-01,
        9.95402813e-01, 9.95398581e-01, 9.97024059e-01, 9.97691274e-01,
        9.92287338e-01, 3.05294989e-09, 9.99536097e-01, 9.96031106e-01,
        9.96004224e-01
    ],
    [
        9.99179482e-01, 9.97305810e-01, 9.98935759e-01, 9.98170495e-01,
        9.97503281e-01, 9.99220371e-01, 9.97820318e-01, 9.97421384e-01,
        9.98268306e-01, 9.98218417e-01, 9.94748592e-01, 9.95054245e-01,
        9.98073280e-01, 9.99536097e-01, 3.80039200e-09, 9.98350918e-01,
        9.99510646e-01
    ],
    [
        9.97902811e-01, 9.88672316e-01, 9.97619450e-01, 9.97928023e-01,
        9.87207651e-01, 9.98844624e-01, 9.89028573e-01, 9.87813056e-01,
        9.85862017e-01, 9.86866891e-01, 9.91186798e-01, 9.95970786e-01,
        9.87795949e-01, 9.96031106e-01, 9.98350918e-01, 2.95162206e-09,
        9.90921795e-01
    ],
    [
        9.97791469e-01, 9.93405759e-01, 9.96294141e-01, 9.96240139e-01,
        9.93965328e-01, 9.97385919e-01, 9.95509982e-01, 9.93018031e-01,
        9.89939630e-01, 9.95451331e-01, 9.92023647e-01, 9.98503745e-01,
        9.93933260e-01, 9.96004224e-01, 9.99510646e-01, 9.90921795e-01,
        3.08394421e-09
    ],
])

affi = 1 - affi

affi = np.log(affi)

task_list = [
    "Autoencoder", "Curvature", "Denoise", "Edge 2D", "Edge 3D", "Keypoint 2D",
    "Keypoint 3D", "Reshade", "Rgb2depth", "Rgb2mist", "Rgb2sfnorm",
    "Room Layout", "Segment25D", "Segment2D", "Vanishing Point",
    "Segment Semantic", "Class 1000"
]

color2d = 'b'
color3d = 'g'
colorGeo = 'r'
colorSem = 'm'

color_map = {
    "Autoencoder": color2d,
    "Curvature": color3d,
    "Denoise": color2d,
    "Edge 2D": color2d,
    "Edge 3D": color3d,
    "Keypoint 2D": color2d,
    "Keypoint 3D": color3d,
    "Reshade": color3d,
    "Rgb2depth": color3d,
    "Rgb2mist": color3d,
    "Rgb2sfnorm": color3d,
    "Room Layout": colorGeo,
    "Segment25D": color3d,
    "Segment2D": color2d,
    "Vanishing Point": colorGeo,
    "Segment Semantic": colorSem,
    "Class 1000": colorSem
}

from scipy.cluster import hierarchy
import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots(1, 1, figsize=(5, 3))  #画布大小
Z = hierarchy.linkage(y=affi,
                      method='ward',
                      metric='euclidean',
                      optimal_ordering=True)  #生成聚类树
hierarchy.dendrogram(Z,
                     ax=ax,
                     labels=task_list,
                     orientation="left",
                     color_threshold=10,
                     leaf_font_size=10)  #画聚类树

# my_palette = plt.cm.get_cmap("Accent", 3)

xlbls = ax.get_ymajorticklabels()
num = -1
for lbl in xlbls:
    # 设置颜色
    lbl.set_color(color_map[lbl.get_text()])
plt.tight_layout()
fig.savefig("./tree_sim.pdf")
