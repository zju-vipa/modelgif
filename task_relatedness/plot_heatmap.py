import numpy as np

affi = np.array([
    [
        2.98261638e-09, 9.97147799e-01, 7.80778766e-01, 9.71324861e-01,
        9.98061299e-01, 9.45376158e-01, 9.98021066e-01, 9.98193622e-01,
        9.98087823e-01, 9.98247027e-01, 9.98404205e-01, 9.98110175e-01,
        9.98782814e-01, 9.83329594e-01, 9.99179482e-01, 9.97902811e-01,
        9.97791469e-01
    ],
    [
        9.97147799e-01, 2.81929968e-09, 9.96300161e-01, 9.95846570e-01,
        9.59148884e-01, 9.97571588e-01, 9.61596847e-01, 9.56628144e-01,
        9.74429369e-01, 9.73406553e-01, 9.54361379e-01, 9.92731929e-01,
        9.57792044e-01, 9.95106578e-01, 9.97305810e-01, 9.88672316e-01,
        9.93405759e-01
    ],
    [
        7.80778766e-01, 9.96300161e-01, 2.80022627e-09, 9.59299147e-01,
        9.97775257e-01, 9.24247801e-01, 9.97451246e-01, 9.97339547e-01,
        9.97600913e-01, 9.97793376e-01, 9.98384714e-01, 9.98170614e-01,
        9.97962356e-01, 9.77986276e-01, 9.98935759e-01, 9.97619450e-01,
        9.96294141e-01
    ],
    [
        9.71324861e-01, 9.95846570e-01, 9.59299147e-01, 2.49624255e-09,
        9.95363116e-01, 9.69903111e-01, 9.96507049e-01, 9.96779561e-01,
        9.97183919e-01, 9.98085439e-01, 9.97550130e-01, 9.98105943e-01,
        9.96150494e-01, 9.84041929e-01, 9.98170495e-01, 9.97928023e-01,
        9.96240139e-01
    ],
    [
        9.98061299e-01, 9.59148884e-01, 9.97775257e-01, 9.95363116e-01,
        2.37226483e-09, 9.98924553e-01, 9.63288724e-01, 9.44905221e-01,
        9.58660185e-01, 9.60614681e-01, 9.58008766e-01, 9.95631278e-01,
        9.63873267e-01, 9.94775176e-01, 9.97503281e-01, 9.87207651e-01,
        9.93965328e-01
    ],
    [
        9.45376158e-01, 9.97571588e-01, 9.24247801e-01, 9.69903111e-01,
        9.98924553e-01, 2.75135048e-09, 9.99014318e-01, 9.99215007e-01,
        9.98621106e-01, 9.98727679e-01, 9.99224365e-01, 9.99364972e-01,
        9.99040961e-01, 9.84619200e-01, 9.99220371e-01, 9.98844624e-01,
        9.97385919e-01
    ],
    [
        9.98021066e-01, 9.61596847e-01, 9.97451246e-01, 9.96507049e-01,
        9.63288724e-01, 9.99014318e-01, 3.11374659e-09, 9.58835363e-01,
        9.72571969e-01, 9.71712947e-01, 9.62441564e-01, 9.95714247e-01,
        9.62021708e-01, 9.96177197e-01, 9.97820318e-01, 9.89028573e-01,
        9.95509982e-01
    ],
    [
        9.98193622e-01, 9.56628144e-01, 9.97339547e-01, 9.96779561e-01,
        9.44905221e-01, 9.99215007e-01, 9.58835363e-01, 2.50339505e-09,
        9.41108465e-01, 9.49478984e-01, 9.45655167e-01, 9.93939161e-01,
        9.57353890e-01, 9.95405138e-01, 9.97421384e-01, 9.87813056e-01,
        9.93018031e-01
    ],
    [
        9.98087823e-01, 9.74429369e-01, 9.97600913e-01, 9.97183919e-01,
        9.58660185e-01, 9.98621106e-01, 9.72571969e-01, 9.41108465e-01,
        3.76701337e-09, 9.36545551e-01, 9.71445918e-01, 9.94799912e-01,
        9.72160935e-01, 9.95402813e-01, 9.98268306e-01, 9.85862017e-01,
        9.89939630e-01
    ],
    [
        9.98247027e-01, 9.73406553e-01, 9.97793376e-01, 9.98085439e-01,
        9.60614681e-01, 9.98727679e-01, 9.71712947e-01, 9.49478984e-01,
        9.36545551e-01, 2.17914575e-09, 9.72479403e-01, 9.95188057e-01,
        9.71114814e-01, 9.95398581e-01, 9.98218417e-01, 9.86866891e-01,
        9.95451331e-01
    ],
    [
        9.98404205e-01, 9.54361379e-01, 9.98384714e-01, 9.97550130e-01,
        9.58008766e-01, 9.99224365e-01, 9.62441564e-01, 9.45655167e-01,
        9.71445918e-01, 9.72479403e-01, 3.17692761e-09, 9.94601488e-01,
        9.62168455e-01, 9.97024059e-01, 9.94748592e-01, 9.91186798e-01,
        9.92023647e-01
    ],
    [
        9.98110175e-01, 9.92731929e-01, 9.98170614e-01, 9.98105943e-01,
        9.95631278e-01, 9.99364972e-01, 9.95714247e-01, 9.93939161e-01,
        9.94799912e-01, 9.95188057e-01, 9.94601488e-01, 2.95519831e-09,
        9.93482053e-01, 9.97691274e-01, 9.95054245e-01, 9.95970786e-01,
        9.98503745e-01
    ],
    [
        9.98782814e-01, 9.57792044e-01, 9.97962356e-01, 9.96150494e-01,
        9.63873267e-01, 9.99040961e-01, 9.62021708e-01, 9.57353890e-01,
        9.72160935e-01, 9.71114814e-01, 9.62168455e-01, 9.93482053e-01,
        3.18765636e-09, 9.92287338e-01, 9.98073280e-01, 9.87795949e-01,
        9.93933260e-01
    ],
    [
        9.83329594e-01, 9.95106578e-01, 9.77986276e-01, 9.84041929e-01,
        9.94775176e-01, 9.84619200e-01, 9.96177197e-01, 9.95405138e-01,
        9.95402813e-01, 9.95398581e-01, 9.97024059e-01, 9.97691274e-01,
        9.92287338e-01, 3.05294989e-09, 9.99536097e-01, 9.96031106e-01,
        9.96004224e-01
    ],
    [
        9.99179482e-01, 9.97305810e-01, 9.98935759e-01, 9.98170495e-01,
        9.97503281e-01, 9.99220371e-01, 9.97820318e-01, 9.97421384e-01,
        9.98268306e-01, 9.98218417e-01, 9.94748592e-01, 9.95054245e-01,
        9.98073280e-01, 9.99536097e-01, 3.80039200e-09, 9.98350918e-01,
        9.99510646e-01
    ],
    [
        9.97902811e-01, 9.88672316e-01, 9.97619450e-01, 9.97928023e-01,
        9.87207651e-01, 9.98844624e-01, 9.89028573e-01, 9.87813056e-01,
        9.85862017e-01, 9.86866891e-01, 9.91186798e-01, 9.95970786e-01,
        9.87795949e-01, 9.96031106e-01, 9.98350918e-01, 2.95162206e-09,
        9.90921795e-01
    ],
    [
        9.97791469e-01, 9.93405759e-01, 9.96294141e-01, 9.96240139e-01,
        9.93965328e-01, 9.97385919e-01, 9.95509982e-01, 9.93018031e-01,
        9.89939630e-01, 9.95451331e-01, 9.92023647e-01, 9.98503745e-01,
        9.93933260e-01, 9.96004224e-01, 9.99510646e-01, 9.90921795e-01,
        3.08394421e-09
    ],
])


def norm_map(affi_):
    # print(affi_)
    # for i in range(affi.shape[0]):
    #     sort_ = np.argsort(affi_[:, i])
    #     affi_[:, i] = sort_
    # print(affi_)
    # affi_[np.eye(affi_.shape[0], affi_.shape[1], dtype=bool)] = 0
    # print(affi)
    # mx = np.max(affi_)
    # where = affi_ == mx
    # affi_[where] = 0
    # mx2 = np.max(affi_)
    # affi_[where] = min(mx2 * 1.1, mx)

    for i in range(affi.shape[0]):
        affi_i = affi_[:,i]
        mx = np.max(affi_i)
        where = affi_i == mx
        affi_i[where] = 0
        mx2 = np.max(affi_i)
        affi_i[where] = min(mx2 * 1.1, mx)

        affi_i[:] = (affi_i - affi_i.mean(0))/affi_i.std()
    
    return affi_


affi = 1 - affi

task_list = [
    "Autoencoder", "Curvature", "Denoise", "Edge 2D", "Edge 3D", "Keypoint 2D",
    "Keypoint 3D", "Reshade", "Rgb2depth", "Rgb2mist", "Rgb2sfnorm",
    "Room Layout", "Segment25D", "Segment2D", "Vanishing Point",
    "Segment Semantic", "Class 1000"
]
affi = norm_map(affi)

import matplotlib.pyplot as plt
import numpy as np
import pickle
# plt.rcParams['font.sans-serif'] = ['Times New Roman']


def draw_taskonomy(affi, save_name='heatmap_ours'):
    fig = plt.figure(1)

    plt.matshow(affi, cmap=plt.get_cmap('Greens'), alpha=1)  # , alpha=0.3
    plt.xticks(np.arange(17), task_list, rotation=80, fontsize=15)
    plt.yticks(np.arange(17), task_list, rotation=0, fontsize=15)
    plt.savefig(f'{save_name}.pdf', bbox_inches='tight', transparent=False)


draw_taskonomy(affi, 'heatmap_ours')

task_name_map = {
    "autoencoding": "autoencoder",
    "curvature": "curvature",
    "denoising": "denoise",
    "edge_texture": "edge2d",
    "edge_occlusion": "edge3d",
    "keypoints2d": "keypoint2d",
    "keypoints3d": "keypoint3d",
    "reshading": "reshade",
    "depth_zbuffer": "rgb2depth",
    "depth_euclidean": "rgb2mist",
    "normal": "rgb2sfnorm",
    "room_layout": "room_layout",
    "segment_unsup25d": "segment25d",
    "segment_unsup2d": "segment2d",
    "vanishing_point": "vanishing_point_well_defined",
    "segment_semantic": "segmentsemantic_rb",
    "class_object": "class_1000"
}

# 17 task
task_list_name = 'autoencoding curvature denoising edge_texture edge_occlusion \
keypoints2d keypoints3d \
reshading depth_zbuffer depth_euclidean normal \
room_layout segment_unsup25d segment_unsup2d vanishing_point \
segment_semantic class_object'

task_list_origin = [
    task_name_map[task_name] for task_name in task_list_name.split()
]
with open(r'./data/affinities/all_affinities.pkl', 'rb') as f:
    data = pickle.load(f)
t_affinity_matrix = np.zeros((len(task_list_origin), len(task_list_origin)))
for i, task1 in enumerate(task_list_origin):
    for j, task2 in enumerate(task_list_origin):
        t_affinity_matrix[i, j] = data[task1 + "__" + task2]

t_affinity_matrix = norm_map(t_affinity_matrix)
draw_taskonomy(t_affinity_matrix, 'heatmap_taskonomy')

affi_rsa = [
    [
        1., 0.1376794, 0.93213781, 0.15673064, 0.13437064, 0.22355043,
        0.09092928, 0.13415067, 0.13391032, 0.11515446, 0.11948523, 0.10610623,
        0.13187257, 0.44890042, 0.08883177, 0.17294863, 0.22605241
    ],
    [
        0.1376794, 1., 0.13844887, 0.49377386, 0.80846795, 0.20014095,
        0.53996811, 0.77200721, 0.7226831, 0.60002027, 0.77936581, 0.52030083,
        0.75366277, 0.44847794, 0.20197396, 0.6176872, 0.34003893
    ],
    [
        0.93213781, 0.13844887, 1., 0.18050059, 0.12686326, 0.23530508,
        0.09321773, 0.12603272, 0.12810074, 0.10642731, 0.1116848, 0.09079133,
        0.13512218, 0.45801217, 0.06810955, 0.17120823, 0.20115539
    ],
    [
        0.15673064, 0.49377386, 0.18050059, 1., 0.43723855, 0.28201307,
        0.3583938, 0.36947916, 0.34560688, 0.28129716, 0.40130969, 0.25017154,
        0.46840819, 0.56036148, 0.09726688, 0.40614747, 0.2595958
    ],
    [
        0.13437064, 0.80846795, 0.12686326, 0.43723855, 1., 0.18375256,
        0.53102495, 0.87449211, 0.82464881, 0.66547739, 0.86370402, 0.60614182,
        0.70497898, 0.40530493, 0.24426818, 0.63570208, 0.36341151
    ],
    [
        0.22355043, 0.20014095, 0.23530508, 0.28201307, 0.18375256, 1.,
        0.35759872, 0.17411682, 0.15667915, 0.05770138, 0.18921052, 0.11809679,
        0.20187093, 0.27150743, 0.08881376, 0.15781031, 0.12464597
    ],
    [
        0.09092928, 0.53996811, 0.09321773, 0.3583938, 0.53102495, 0.35759872,
        1., 0.49920225, 0.49158376, 0.35301807, 0.57913008, 0.37694086,
        0.57684637, 0.3173912, 0.13008687, 0.32009085, 0.2120679
    ],
    [
        0.13415067, 0.77200721, 0.12603272, 0.36947916, 0.87449211, 0.17411682,
        0.49920225, 1., 0.85789372, 0.69205759, 0.85073123, 0.61243622,
        0.62748081, 0.35772549, 0.25255861, 0.62747836, 0.32223143
    ],
    [
        0.13391032, 0.7226831, 0.12810074, 0.34560688, 0.82464881, 0.15667915,
        0.49158376, 0.85789372, 1., 0.7121753, 0.80361416, 0.5655963,
        0.65128963, 0.35255475, 0.2241062, 0.56741355, 0.34037174
    ],
    [
        0.11515446, 0.60002027, 0.10642731, 0.28129716, 0.66547739, 0.05770138,
        0.35301807, 0.69205759, 0.7121753, 1., 0.65147183, 0.42627357,
        0.55054617, 0.30006247, 0.21182159, 0.47088153, 0.27948513
    ],
    [
        0.11948523, 0.77936581, 0.1116848, 0.40130969, 0.86370402, 0.18921052,
        0.57913008, 0.85073123, 0.80361416, 0.65147183, 1., 0.67826695,
        0.69688473, 0.38907839, 0.29103519, 0.57208242, 0.33289201
    ],
    [
        0.10610623, 0.52030083, 0.09079133, 0.25017154, 0.60614182, 0.11809679,
        0.37694086, 0.61243622, 0.5655963, 0.42627357, 0.67826695, 1.,
        0.43300921, 0.25664297, 0.24758258, 0.44088344, 0.27654369
    ],
    [
        0.13187257, 0.75366277, 0.13512218, 0.46840819, 0.70497898, 0.20187093,
        0.57684637, 0.62748081, 0.65128963, 0.55054617, 0.69688473, 0.43300921,
        1., 0.51803596, 0.14573042, 0.47699707, 0.33778563
    ],
    [
        0.44890042, 0.44847794, 0.45801217, 0.56036148, 0.40530493, 0.27150743,
        0.3173912, 0.35772549, 0.35255475, 0.30006247, 0.38907839, 0.25664297,
        0.51803596, 1., 0.11081884, 0.39027391, 0.31986137
    ],
    [
        0.08883177, 0.20197396, 0.06810955, 0.09726688, 0.24426818, 0.08881376,
        0.13008687, 0.25255861, 0.2241062, 0.21182159, 0.29103519, 0.24758258,
        0.14573042, 0.11081884, 1., 0.18341853, 0.12043599
    ],
    [
        0.17294863, 0.6176872, 0.17120823, 0.40614747, 0.63570208, 0.15781031,
        0.32009085, 0.62747836, 0.56741355, 0.47088153, 0.57208242, 0.44088344,
        0.47699707, 0.39027391, 0.18341853, 1., 0.32074161
    ],
    [
        0.22605241, 0.34003893, 0.20115539, 0.2595958, 0.36341151, 0.12464597,
        0.2120679, 0.32223143, 0.34037174, 0.27948513, 0.33289201, 0.27654369,
        0.33778563, 0.31986137, 0.12043599, 0.32074161, 1.
    ]
]

affi_rsa = np.array(affi_rsa)

affi_rsa = norm_map(affi_rsa)

draw_taskonomy(affi_rsa, 'heatmap_rsa')
